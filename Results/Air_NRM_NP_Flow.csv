Query,obj,LLM Revenue,model,code,Our Set,Optimal Set,LLM Count,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 3 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-3:40pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40')]",274294.7697,275590.146,"{'y_CA07:40': 1.0, 'y_BC11:20': 1.0, 'y_AB13:55': 1.0}",,"AB11:20,AB12:40,AB13:55","AB11:20,AB12:40,AB13:55",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 5 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-3:40pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40')]",424600.2566,476779.634,,,"CA07:40,CA16:55,CA18:30","CA07:40,CA16:55,CA18:30",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 10 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-3:40pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40')]",771640.3999,118065.418,,,CB7:40 CB10:45 CB 14:15,CB7:40 CB10:45 CB 14:15,1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 10 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-4:05pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05')]",872544.0987,91162.0515,,,"BC11:20,BC16:30,BC19:05","BC11:20,BC16:30,BC19:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 5 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-4:05pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05')]",505966.7281,117631.275,,,"BC11:20,BC12:25,BC15:40,BC16:30,BC19:05","BC11:20,BC12:25,BC15:40,BC16:30,BC19:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 14 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-4:05pm) in which the optional flights are:
[(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05')]",1180273.273,110505.66,,,"{'y_BC12:25': 1.0, 'y_BC11:20': 1.0, 'y_BC16:30': 1.0, 'y_BC19:05': 1.0}","{'y_BC12:25': 1.0, 'y_BC11:20': 1.0, 'y_BC16:30': 1.0, 'y_BC19:05': 1.0}",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 8 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0am-4:35pm) in which the optional flights are:[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30')]",815657.0977,390722.955,,,"AB11:20,AB12:40,AB13:55,AB17:05","AB11:20,AB12:40,AB13:55,AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 12 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0am-4:35pm) in which the optional flights are:[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30')]",1070244.59,318074.822,,,"AB11:20,AB13:55,AB17:05","AB11:20,AB13:55,AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 16 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0am-4:35pm) in which the optional flights are:[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30')]",1166198.329,462621.849,,,"AB11:20,AB12:40,AB13:55,AB16:05,AB17:05","AB11:20,AB12:40,AB13:55,AB16:05,AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. 

The goal of this model is to recommend the optimal 3 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-4:55pm) in which the optional flights are:

[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55')]",308002.84,336806.097,"Objective Function: Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

Capacity Constraints:

capacity_consum*x_f[i] + x_l[i] <= 187

Balance Constraints:

ratio_f_list[i]* x_f[i] + ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i] + avg_pax_l [i]

Scale Constraints:
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

M Constraints:

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

Flow Conservation Constraints:

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

Cardinality Constraints:

\sum_i y[i] <= option_num

Nonnegative Constraints: x_f[i],x_l[i],x_o[i] >= 0

Binary Constraints: y[i] is binary, where decision variables are based on the list pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55'], x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55'], sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05'], sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55'], sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30'], sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30'], sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0'] 
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72']
option_num = 3 

capacity_consum = 1.2",,"AB13:55,AB17:05,AC15:45","AB13:55,AB17:05,AC15:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 3 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are:
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-5:10pm) in which the optional flights are:

[
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05')
]",313421.6148,445234.116,,,"AB13:55,AB17:05,AC15:45,AC17:25","AB13:55,AB17:05,AC15:45,AC17:25",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 5 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are:
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (7am-5:10pm) in which the optional flights are:

[
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05')
]",438114.4593,554091.406,5.02E+05,"y[AC00:00] 1.0
y[AC13:05] 1.0
y[AB13:55] 1.0
y[AC15:45] 1.0
y[AC17:25] 1.0","AB13:55,AB17:05,AC00:00,AC15:45,AC17:25","AB13:55,AB17:05,AC00:00,AC15:45,AC17:25",1,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 3 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B')  in a departure period (0am-5:30pm) in which the optional flights are: [(OD = ('A', 'C') AND Departure Time='0:00'),(OD = ('C', 'B') AND Departure Time='7:40'),(OD = ('C', 'A') AND Departure Time='7:40'),(OD = ('B', 'A') AND Departure Time='9:05'),(OD = ('B', 'C') AND Departure Time='9:05'),(OD = ('C', 'B') AND Departure Time='10:45'),(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25')]",313421.6148,336806.097,,,"AB13:55,AB17:05,AC15:45","AB13:55,AB17:05,AC15:45",1,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 2 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 5 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B')  in a departure period (7am-6pm) in which the optional flights are: [(OD = ('C', 'B') AND Departure Time='7:40'),(OD = ('C', 'A') AND Departure Time='7:40'),(OD = ('B', 'A') AND Departure Time='9:05'),(OD = ('B', 'C') AND Departure Time='9:05'),(OD = ('C', 'B') AND Departure Time='10:45'),(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25'), (OD = ('A', 'B') AND Departure Time='18:00')]",547381.1535,445234.116,,,"AB13:55,AB17:05,AC15:45,AC17:25","AB13:55,AB17:05,AC15:45,AC17:25",1,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 3 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 4 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B')  in a departure period (10am-7pm) in which the optional flights are: [(OD = ('C', 'B') AND Departure Time='10:45'),(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25'), (OD = ('A', 'B') AND Departure Time='18:00'),(OD = ('C', 'B') AND Departure Time='18:30'),(OD = ('C', 'A') AND Departure Time='18:30'),(OD = ('B', 'A') AND Departure Time='18:50'')]",415799.4867,544304.209,,,"AB13:55,AB17:05,AC13:05,AC15:45,AC17:25","AB13:55,AB17:05,AC13:05,AC15:45,AC17:25",1,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 4 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (10am-8pm) in which the optional flights are: [(OD = ('C', 'B') AND Departure Time='10:45'),(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25'), (OD = ('A', 'B') AND Departure Time='18:00'),(OD = ('C', 'B') AND Departure Time='18:30'),(OD = ('C', 'A') AND Departure Time='18:30'),(OD = ('B', 'A') AND Departure Time='18:50''), (OD = ('B', 'C') AND Departure Time='19:05'), (OD = ('A', 'B') AND Departure Time='19:10')]",560665.4093,482459.598,"Objective Function: Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

Capacity Constraints:

capacity_consum*x_f[i] + x_l[i] <= 187

Balance Constraints:

ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]

Scale Constraints:
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

M Constraints:

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

Flow Conservation Constraints:

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

Cardinality Constraints:

\sum_i y[i] <= option_num

Nonnegative Constraints: x_f[i],x_l[i],x_o[i] >= 0

Binary Constraints: y[i] is binary, where decision variables are based on the list pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CB14:15', 'CA14:15', 'BA14:25', 'BC14:25', 'AC15:45', 'AB16:05', 'BC16:30', 'CB16:55', 'CA16:55', 'AB17:05', 'AC17:25', 'AB18:00', 'CB18:30', 'CA18:30', 'BC19:05', 'AB19:10'], x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt] 
sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'CA16:55', 'CA18:30'], sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10'], sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'AB18:00', 'CB18:30', 'AB19:10'], sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BC16:30', 'BC19:05'], sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05'], sigma_outflow_C = ['CB10:45', 'CB12:35', 'CB14:15', 'CA14:15', 'CB16:55', 'CA16:55', 'CB18:30', 'CA18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '33.71', '91.64', '133.0', '9.4', '133.71', '167.79', '92.36', '2.0', '149.29', '152.36', '130.14', '104.14', '13.57', '149.07', '137.14', '122.71'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '5.93', '17.86', '28.93', '1.67', '20.5', '25.43', '6.36', '2.4', '24.5', '27.14', '19.14', '13.64', '3.38', '17.43', '17.57', '19.07'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1510.9', '1638.05', '1480.24', '1521.05', '1669.65', '852.25', '907.06', '1583.0', '1665.33', '1475.07', '1670.39', '833.23', '1523.0', '1665.21', '875.17', '1466.01']  
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '496.51', '531.5', '470.65', '821.73', '506.95', '275.1', '268.12', '558.48', '493.28', '461.18', '473.92', '261.39', '443.91', '463.64', '282.71', '433.96'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '1.624', '3.126', '3.126', '2.411', '1.624']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '0.793', '1.631', '1.631', '1.293', '0.793']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '0.9']
ratio_0_list=['1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '4.92']
option_num = 4 

capacity_consum = 1.2","import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")

# Data
pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 
'AB12:55', 'AC13:05', 'AB13:55', 'CB14:15', 'CA14:15', 'BA14:25', 'BC14:25', 
'AC15:45', 'AB16:05', 'BC16:30', 'CB16:55', 'CA16:55', 'AB17:05', 'AC17:25', 
'AB18:00', 'CB18:30', 'CA18:30', 'BC19:05', 'AB19:10']

# Convert all string numbers to float
avg_pax_f = [float(x) for x in ['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', 
'131.43', '111.64', '142.43', '33.71', '91.64', '133.0', '9.4', 
'133.71', '167.79', '92.36', '2.0', '149.29', '152.36', '130.14', 
'104.14', '13.57', '149.07', '137.14', '122.71']]

avg_pax_l = [float(x) for x in ['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', 
'20.29', '23.79', '28.21', '5.93', '17.86', '28.93', '1.67', 
'20.5', '25.43', '6.36', '2.4', '24.5', '27.14', '19.14', 
'13.64', '3.38', '17.43', '17.57', '19.07']]

avg_price_f = [float(x) for x in ['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', 
'1467.29', '856.66', '1663.16', '1477.78', '1510.9', '1638.05', 
'1480.24', '1521.05', '1669.65', '852.25', '907.06', '1583.0', 
'1665.33', '1475.07', '1670.39', '833.23', '1523.0', '1665.21', 
'875.17', '1466.01']]

avg_price_l = [float(x) for x in ['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', 
'505.8', '279.25', '565.96', '464.67', '496.51', '531.5', 
'470.65', '821.73', '506.95', '275.1', '268.12', '","AB11:20,AB12:40,AB13:55,AB17:05,CB12:35","AB11:20,AB12:40,AB13:55,AB17:05,CB12:35",1,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 3 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 3 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B')  in a departure period (11am-9pm) in which the optional flights are: [(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25'), (OD = ('A', 'B') AND Departure Time='18:00'),(OD = ('C', 'B') AND Departure Time='18:30'),(OD = ('C', 'A') AND Departure Time='18:30'),(OD = ('B', 'A') AND Departure Time='18:50''), (OD = ('B', 'C') AND Departure Time='19:05'), (OD = ('A', 'B') AND Departure Time='19:10'), (OD = ('B', 'A') AND Departure Time='20:25'')]",235284.9235,409811.466,"Objective Function: Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

Capacity Constraints:

capacity_consum*x_f[i] + x_l[i] <= 187

Balance Constraints:

ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]

Scale Constraints:
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

M Constraints:

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

Flow Conservation Constraints:

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

Cardinality Constraints:

\sum_i y[i] <= option_num

Nonnegative Constraints: x_f[i],x_l[i],x_o[i] >= 0

Binary Constraints: y[i] is binary, where decision variables are based on the list pt = ['AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CB14:15', 'CA14:15', 'BA14:25', 'BC14:25', 'AC15:45', 'AB16:05', 'BC16:30', 'CB16:55', 'CA16:55', 'AB17:05', 'AC17:25', 'AB18:00', 'CB18:30', 'CA18:30', 'BC19:05', 'AB19:10', 'BA20:25'], x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt] 
sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'CA16:55', 'CA18:30', 'BA20:25'], sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10'], sigma_inflow_B = ['AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'AB18:00', 'CB18:30', 'AB19:10'], sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BC16:30', 'BC19:05', 'BA20:25'], sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05'], sigma_outflow_C = ['CB12:35', 'CB14:15', 'CA14:15', 'CB16:55', 'CA16:55', 'CB18:30', 'CA18:30'] 

avg_pax_f=['160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '33.71', '91.64', '133.0', '9.4', '133.71', '167.79', '92.36', '2.0', '149.29', '152.36', '130.14', '104.14', '13.57', '149.07', '137.14', '122.71', '166.79'] 
avg_pax_l=['18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '5.93', '17.86', '28.93', '1.67', '20.5', '25.43', '6.36', '2.4', '24.5', '27.14', '19.14', '13.64', '3.38', '17.43', '17.57', '19.07', '14.29'] 
avg_price_f=['1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1510.9', '1638.05', '1480.24', '1521.05', '1669.65', '852.25', '907.06', '1583.0', '1665.33', '1475.07', '1670.39', '833.23', '1523.0', '1665.21', '875.17', '1466.01', '1462.84']  
avg_price_l=['441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '496.51', '531.5', '470.65', '821.73', '506.95', '275.1', '268.12', '558.48', '493.28', '461.18', '473.92', '261.39', '443.91', '463.64', '282.71', '433.96', '423.5'] 
value_f_list =['2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '1.624', '3.126', '3.126', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.72', '0.9']
value_l_list=['1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '0.793', '1.631', '1.631', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.72', '0.9']
value_0_list=['0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '4.92', '3.7']
option_num = 3 

capacity_consum = 3","import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")

# Data
pt = ['AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CB14:15', 'CA14:15', 'BA14:25', 'BC14:25', 'AC15:45', 'AB16:05', 'BC16:30', 'CB16:55', 'CA16:55', 'AB17:05', 'AC17:25', 'AB18:00', 'CB18:30', 'CA18:30', 'BC19:05', 'AB19:10', 'BA20:25']

# Convert all string numbers to float
avg_pax_f = [float(x) for x in ['160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '33.71', '91.64', '133.0', '9.4', '133.71', '167.79', '92.36', '2.0', '149.29', '152.36', '130.14', '104.14', '13.57', '149.07', '137.14', '122.71', '166.79']]

avg_pax_l = [float(x) for x in ['18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '5.93', '17.86', '28.93', '1.67', '20.5', '25.43', '6.36', '2.4', '24.5', '27.14', '19.14', '13.64', '3.38', '17.43', '17.57', '19.07', '14.29']]

avg_price_f = [float(x) for x in ['1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1510.9', '1638.05', '1480.24', '1521.05', '1669.65', '852.25', '907.06', '1583.0', '1665.33', '1475.07', '1670.39', '833.23', '1523.0', '1665.21', '875.17', '1466.01', '1462.84']]

avg_price_l = [float(x) for x in ['441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '496.51', '531.5', '470.65', '821.73', '506.95', '275.1', '268.12', '558.48', '493.28', '461.18', '473.92', '261.39', '443.91', '463.64","AB11:20,AB13:55,AB17:05,CB12:35","AB11:20,AB13:55,AB17:05,CB12:35",0,
"Based on flight ticket options provided in 'information.csv', along with their associated attraction values (v1) and shadow attraction value ratios (v2), considering that each Eco_flex ticket consumes 2 units of flight capacity and enforcing flow conservation constraint at each airport for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model. The goal of this model is to recommend the optimal 5 flights that maximize total ticket sale revenue, specifically among flights the origin-destination pairs are: OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B')  in a departure period (9am-7pm) in which the optional flights are: [(OD = ('B', 'C') AND Departure Time='9:05''),(OD = ('B', 'A') AND Departure Time='9:05''),(OD = ('C', 'B') AND Departure Time='10:45'),(OD = ('A', 'B') AND Departure Time='11:20'),(OD = ('B', 'C') AND Departure Time='11:20'),(OD = ('B', 'A') AND Departure Time='12:25'), (OD = ('B', 'C') AND Departure Time='12:25'),(OD = ('C', 'B') AND Departure Time='12:35'),(OD = ('A', 'B') AND Departure Time='12:40'), (OD = ('A', 'B') AND Departure Time='12:55'), (OD = ('A', 'C') AND Departure Time='13:05'),(OD = ('A', 'B') AND Departure Time='13:55'), (OD = ('C', 'B') AND Departure Time='14:15'), (OD = ('C', 'A') AND Departure Time='14:15'), (OD = ('B', 'A') AND Departure Time='14:25'), (OD = ('B', 'C') AND Departure Time='14:25'),(OD = ('B', 'C') AND Departure Time='15:40''),(OD = ('B', 'A') AND Departure Time='15:40''), (OD = ('A', 'C') AND Departure Time='15:45'), (OD = ('A', 'B') AND Departure Time='16:05'), (OD = ('B', 'C') AND Departure Time='16:30'), (OD = ('C', 'B') AND Departure Time='16:55'),(OD = ('C', 'A') AND Departure Time='16:55'), (OD = ('A', 'B') AND Departure Time='17:05'), (OD = ('A', 'C') AND Departure Time='17:25'), (OD = ('A', 'B') AND Departure Time='18:00'),(OD = ('C', 'B') AND Departure Time='18:30'),(OD = ('C', 'A') AND Departure Time='18:30'),(OD = ('B', 'A') AND Departure Time='18:50'')]",566576.7903,318074.822,,,"AB11:20,AB13:55,AB17:05","AB11:20,AB13:55,AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 11 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (10:45am-10:45pm) in which the optional flights are:
[(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]",978785.0591,507222.058,"Objective Function: Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

Capacity Constraints:

capacity_consum*x_f[i] + x_l[i] <= 187

Balance Constraints:

ratio_f_list[i]* x_f[i] + ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i] + avg_pax_l [i]

Scale Constraints:
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

M Constraints:

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

Flow Conservation Constraints:

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

Cardinality Constraints:

\sum_i y[i] <= option_num

Nonnegative Constraints: x_f[i],x_l[i],x_o[i] >= 0

Binary Constraints: y[i] is binary, where decision variables are based on the list pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45']
x_f = [x_code_f for code in pt]
x_l = [x_code_l for code in pt]
x_o = [x_code_o for code in pt]
y = [y_code for code in pt] 
sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47'] 
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 11 
capacity_consum = 3 
","import gurobipy as gp
from gurobipy import GRB
pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45']

sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47'] 
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 11 
capacity_consum = 3 

# Create model
model = gp.Model(""FlightTicketOptimization"")



avg_pax_f_1 = [float(x) for x in avg_pax_f]

avg_pax_l_1 = [float(x) for x in avg_pax_l]

avg_price_f_1 = [float(x) for x in avg_price_f]

avg_price_l_1 = [float(x) for x in avg_price_l]

value_f_list_1 = [float(x) for x in value_f_list]

ratio_f_list_1 = [float(x) for x in ratio_f_list]

value_l_list_1 = [float(x) for x in value_l_list]

ratio_l_list_1 = [float(x) for x in ratio_l_list]

value_0_list_1 = [float(x) for x in value_0_list]

ratio_0_list_1 = [float(x) for x in ratio_0_list]

avg_pax_f = avg_pax_f_1
avg_pax_l = avg_pax_l_1
avg_price_f = avg_price_f_1
avg_price_l = avg_price_l_1
value_f_list = value_f_list_1
value_l_list = value_l_list_1
value_0_list = value_0_list_1

ratio_f_list = ratio_f_list_1
ratio_l_list = ratio_l_list_1
ratio_0_list = ratio_0_list_1
# Decision variables
x_f = model.addVars(pt, name=""x_f"") # Flexible tickets
x_l = model.addVars(pt, name=""x_l"") # Limited tickets
x_o = model.addVars(pt, name=""x_o"") # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"") # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{pt[i]}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
ratio_f_list[i] * x_f[pt[i]] + ratio_l_list[i] * x_l[pt[i]] + ratio_0_list[i] * x_o[pt[i]] 
<= avg_pax_f[i] + avg_pax_l[i],
f""balance_{pt[i]}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/value_f_list[i] - x_o[pt[i]]/value_0_list[i] <= 0, f""scale_f_{pt[i]}"")
model.addConstr(x_l[pt[i]]/value_l_list[i] - x_o[pt[i]]/value_0_list[i] <= 0, f""scale_l_{pt[i]}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{pt[i]}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{pt[i]}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{pt[i]}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) == 
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) == 
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) == 
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{pt[i]}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{pt[i]}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{pt[i]}"")

# Optimize model
model.optimize()

# Print solution
if model.status == GRB.OPTIMAL:
print(f""Optimal revenue: {model.objVal}"")
print(""\nSelected flights and ticket allocations:"")
for flight in pt:
if y[flight].X > 0.5:
print(f""\nFlight {flight}:"")
print(f"" Flexible tickets: {x_f[flight].X:.2f}"")
print(f"" Limited tickets: {x_l[flight].X:.2f}"")
print(f"" Other tickets: {x_o[flight].X:.2f}"")

# Print flow conservation information
print(""\nFlow conservation results:"")
print(f""Airport A - Inflows: {sum(y[flight].X for flight in sigma_inflow_A):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_A):.2f}"")
print(f""Airport B - Inflows: {sum(y[flight].X for flight in sigma_inflow_B):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_B):.2f}"")
print(f""Airport C - Inflows: {sum(y[flight].X for flight in sigma_inflow_C):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_C):.2f}"")

# Print total flights selected
print(f""\nTotal flights selected: {sum(y[flight].X for flight in pt)} (max allowed: {option_num})"")
else:
print(""No solution found"")
print(f""Model status: {model.status}"")

# Save model to file for inspection
model.write(""flight_optimization.lp"")","AB11:20,AB13:55,AB17:05,AB22:45,CB12:35","AB11:20,AB13:55,AB17:05,AB22:45,CB12:35",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 8 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (10:45am-10:45pm) in which the optional flights are:
[(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]",927286.3479,415485.414,"Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

capacity_consum*x_f[i] + x_l[i] <= Flex Cpy Coef

ratio_f_list[i]* x_f[i] + ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i] + avg_pax_l [i]

x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

\sum_i y[i] <= option_num

x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45']
x_f = [x_code_f for code in pt]
x_l = [x_code_l for code in pt]
x_o = [x_code_o for code in pt]
y = [y_code for code in pt] 
sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47'] 
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 8 
capacity_consum = 2","import gurobipy as gp
from gurobipy import GRB
pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45']

sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47'] 
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 8 
capacity_consum = 2 
# Create model
model = gp.Model(""FlightTicketOptimization"")



avg_pax_f_1 = [float(x) for x in avg_pax_f]

avg_pax_l_1 = [float(x) for x in avg_pax_l]

avg_price_f_1 = [float(x) for x in avg_price_f]

avg_price_l_1 = [float(x) for x in avg_price_l]

value_f_list_1 = [float(x) for x in value_f_list]

ratio_f_list_1 = [float(x) for x in ratio_f_list]

value_l_list_1 = [float(x) for x in value_l_list]

ratio_l_list_1 = [float(x) for x in ratio_l_list]

value_0_list_1 = [float(x) for x in value_0_list]

ratio_0_list_1 = [float(x) for x in ratio_0_list]

avg_pax_f = avg_pax_f_1
avg_pax_l = avg_pax_l_1
avg_price_f = avg_price_f_1
avg_price_l = avg_price_l_1
value_f_list = value_f_list_1
value_l_list = value_l_list_1
value_0_list = value_0_list_1

ratio_f_list = ratio_f_list_1
ratio_l_list = ratio_l_list_1
ratio_0_list = ratio_0_list_1
# Decision variables
x_f = model.addVars(pt, name=""x_f"") # Flexible tickets
x_l = model.addVars(pt, name=""x_l"") # Limited tickets
x_o = model.addVars(pt, name=""x_o"") # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"") # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{pt[i]}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
ratio_f_list[i] * x_f[pt[i]] + ratio_l_list[i] * x_l[pt[i]] + ratio_0_list[i] * x_o[pt[i]] 
<= avg_pax_f[i] + avg_pax_l[i],
f""balance_{pt[i]}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/value_f_list[i] - x_o[pt[i]]/value_0_list[i] <= 0, f""scale_f_{pt[i]}"")
model.addConstr(x_l[pt[i]]/value_l_list[i] - x_o[pt[i]]/value_0_list[i] <= 0, f""scale_l_{pt[i]}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{pt[i]}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{pt[i]}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{pt[i]}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) == 
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) == 
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) == 
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{pt[i]}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{pt[i]}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{pt[i]}"")

# Optimize model
model.optimize()

# Print solution
if model.status == GRB.OPTIMAL:
print(f""Optimal revenue: {model.objVal}"")
print(""\nSelected flights and ticket allocations:"")
for flight in pt:
if y[flight].X > 0.5:
print(f""\nFlight {flight}:"")
print(f"" Flexible tickets: {x_f[flight].X:.2f}"")
print(f"" Limited tickets: {x_l[flight].X:.2f}"")
print(f"" Other tickets: {x_o[flight].X:.2f}"")

# Print flow conservation information
print(""\nFlow conservation results:"")
print(f""Airport A - Inflows: {sum(y[flight].X for flight in sigma_inflow_A):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_A):.2f}"")
print(f""Airport B - Inflows: {sum(y[flight].X for flight in sigma_inflow_B):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_B):.2f}"")
print(f""Airport C - Inflows: {sum(y[flight].X for flight in sigma_inflow_C):.2f} = Outflows: {sum(y[flight].X for flight in sigma_outflow_C):.2f}"")

# Print total flights selected
print(f""\nTotal flights selected: {sum(y[flight].X for flight in pt)} (max allowed: {option_num})"")
else:
print(""No solution found"")
print(f""Model status: {model.status}"")

# Save model to file for inspection
model.write(""flight_optimization.lp"")","AB11:20,AB13:55,AB17:05,AB22:45","AB11:20,AB13:55,AB17:05,AB22:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 9 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (10:45am-10:45pm) in which the optional flights are:
[(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]",1016514.702,322257.435,"Maximize \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )

capacity_consum*x_f[i] + x_l[i] <= avg_pax_f[i] + avg_pax_l [i]

ratio_f_list[i]* x_f[i] + ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i] + avg_pax_l [i]

x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0

x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]

\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]

\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]

\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]

\sum_i y[i] <= option_num

x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt = ['CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45']
x_f = [x_code_f for code in pt]
x_l = [x_code_l for code in pt]
x_o = [x_code_o for code in pt]
y = [y_code for code in pt] 
sigma_inflow_A = ['BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47'] 
avg_price_l=['263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9',",,"AB13:55,AB17:05,AB22:45","AB13:55,AB17:05,AB22:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 11 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-7:05pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05')] ",1019731.345,318074.822," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 11 
capacity_consum = 3","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 11 
capacity_consum = 3
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20,AB13:55,AB17:05","AB11:20,AB13:55,AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 15 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-7:05pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05')] ",1553299.446,409811.466," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 15 
capacity_consum = 2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 15 
capacity_consum = 2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20,AB13:55,AB17:05,CB12:35","AB11:20,AB13:55,AB17:05,CB12:35",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 20 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-7:05pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05')] ",1928870.402,482459.598," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 20 
capacity_consum = 1.2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7']
option_num = 20 
capacity_consum = 1.2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20,AB12:40,AB13:55,AB17:05,CB12:35","AB11:20,AB12:40,AB13:55,AB17:05,CB12:35",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 20 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-8:25pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25')]  ",1945730.883,482459.5983," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 20 
capacity_consum = 1.2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 20 
capacity_consum = 1.2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20, CB12:35, AB12:40, AB13:55, AB17:05","AB11:20, CB12:35, AB12:40, AB13:55, AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 15 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-8:25pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25')]  ",1338745.211,400707.3172," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 15 
capacity_consum = 3","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 15 
capacity_consum = 3
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20, CB12:35, AB13:55, AB17:05","AB11:20, CB12:35, AB13:55, AB17:05",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 9 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-8:25pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25')]  ",1034657.527,322257.4346," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 9 
capacity_consum = 2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7']
option_num = 9 
capacity_consum = 2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB13:55, AB17:05, AB22:45","AB13:55, AB17:05, AB22:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 9 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-11:59pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]  ",1034657.527,322257.4346," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 9 
capacity_consum = 2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 9 
capacity_consum = 2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB13:55, AB17:05, AB22:45","AB13:55, AB17:05, AB22:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 3 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 15 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-11:59pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]  ",1344527.954,415485.4139," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 15 
capacity_consum = 3","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 15 
capacity_consum = 3
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20, AB13:55, AB17:05, AB22:45","AB11:20, AB13:55, AB17:05, AB22:45",1,
"Based on flight ticket options provided in the table, along with their average passengers (Avg Pax), average prices (Avg Price), and capacity coefficients (Flex Cpy Coef), considering that each Eco_flex ticket consumes 1.2 units of flight capacity and each Eco_lite ticket consumes 1 unit of capacity, while enforcing flow conservation constraints at each airport (A, B, C) for long-term planning model, develop a Sales-Based Linear Programming (SBLP) model.

The goal of this model is to recommend the optimal 30 flights that maximize total ticket sale revenue, specifically among flights where the origin-destination pairs are: 
OD = ('A', 'B') or OD = ('A', 'C') or OD = ('B', 'A') or OD = ('B', 'C') or ('C', 'A') or ('C', 'B') in a departure period (0:00am-11:59pm) in which the optional flights are:
[(OD = ('A', 'C') AND Departure Time='0:00'),
(OD = ('C', 'A') AND Departure Time='7:40'),
(OD = ('C', 'B') AND Departure Time='7:40'),
(OD = ('B', 'A') AND Departure Time='9:05'),
(OD = ('B', 'C') AND Departure Time='9:05'),
(OD = ('C', 'B') AND Departure Time='10:45'),
(OD = ('A', 'B') AND Departure Time='11:20'),
(OD = ('B', 'C') AND Departure Time='11:20'),
(OD = ('B', 'A') AND Departure Time='12:25'),
(OD = ('B', 'C') AND Departure Time='12:25'),
(OD = ('C', 'B') AND Departure Time='12:35'),
(OD = ('A', 'B') AND Departure Time='12:40'),
(OD = ('A', 'B') AND Departure Time='12:55'),
(OD = ('A', 'C') AND Departure Time='13:05'),
(OD = ('A', 'B') AND Departure Time='13:55'),
(OD = ('C', 'A') AND Departure Time='14:15'),
(OD = ('C', 'B') AND Departure Time='14:15'),
(OD = ('B', 'A') AND Departure Time='14:25'),
(OD = ('B', 'C') AND Departure Time='14:25'),
(OD = ('B', 'A') AND Departure Time='15:40'),
(OD = ('B', 'C') AND Departure Time='15:40'),
(OD = ('A', 'C') AND Departure Time='15:45'),
(OD = ('A', 'B') AND Departure Time='16:05'),
(OD = ('B', 'C') AND Departure Time='16:30'),
(OD = ('C', 'A') AND Departure Time='16:55'),
(OD = ('C', 'B') AND Departure Time='16:55'),
(OD = ('A', 'B') AND Departure Time='17:05'),
(OD = ('A', 'C') AND Departure Time='17:25'),
(OD = ('C', 'B') AND Departure Time='17:40'),
(OD = ('A', 'B') AND Departure Time='18:00'),
(OD = ('C', 'A') AND Departure Time='18:30'),
(OD = ('C', 'B') AND Departure Time='18:30'),
(OD = ('B', 'A') AND Departure Time='18:50'),
(OD = ('B', 'C') AND Departure Time='19:05'),
(OD = ('A', 'B') AND Departure Time='19:10'),
(OD = ('B', 'A') AND Departure Time='20:25'),
(OD = ('A', 'B') AND Departure Time='22:45')]  ",2367394.101,440119.318," max \sum_i (avg_price_f[i]*x_f[i] + avg_price_l[i]*x_l[i] )
capacity_consum*x_f[i] + x_l[i] <= 187
ratio_f_list[i]* x_f[i] +  ratio_l_list[i]* x_l[i] + ratio_0_list[i]* x_o[i] <= avg_pax_f[i]  + avg_pax_l [i]
x_f[i]/value_f_list[i] - x_o[i]/value_0_list[i] <=0
x_l[i]/value_l_list[i] - x_o[i]/value_0_list[i] <=0
x_f[i] <= 10000* y[i]
x_l[i] <= 10000* y[i]
x_o[i] <= 10000* y[i]
\sum_i \in sigma_inflow_A y[i] = \sum_i \in sigma_outflow_A y[i]
\sum_i \in sigma_inflow_B y[i] = \sum_i \in sigma_outflow_B y[i]
\sum_i \in sigma_inflow_C y[i] = \sum_i \in sigma_outflow_C y[i]
\sum_i y[i] <= option_num
x_f[i],x_l[i],x_o[i] >= 0
y[i] is binary, where decision variables are based on the list pt and x_f = [x_code_f for code in pt], x_l = [x_code_l for code in pt], x_o = [x_code_o for code in pt], y = [y_code for code in pt]. To be more specific, 
[36;1m[1;3mpt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 

avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 30 
capacity_consum = 1.2","pt = ['AC00:00', 'CA07:40', 'CB07:40', 'BA9:05', 'BC9:05', 'CB10:45', 'AB11:20', 'BC11:20', 'BA12:25', 'BC12:25', 'CB12:35', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'CA14:15', 'CB14:15', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'AC15:45', 'AB16:05', 'BC16:30', 'CA16:55', 'CB16:55', 'AB17:05', 'AC17:25', 'CB17:40', 'AB18:00', 'CA18:30', 'CB18:30', 'BA18:50', 'BC19:05', 'AB19:10', 'BA20:25', 'AB22:45'] 
sigma_inflow_A = ['CA07:40', 'BA9:05', 'BA12:25', 'CA14:15', 'BA14:25', 'BA15:40', 'CA16:55', 'CA18:30', 'BA18:50', 'BA20:25'] 
sigma_outflow_A = ['AC00:00', 'AB11:20', 'AB12:40', 'AB12:55', 'AC13:05', 'AB13:55', 'AC15:45', 'AB16:05', 'AB17:05', 'AC17:25', 'AB18:00', 'AB19:10', 'AB22:45']
sigma_inflow_B = ['CB07:40', 'CB10:45', 'AB11:20', 'CB12:35', 'AB12:40', 'AB12:55', 'AB13:55', 'CB14:15', 'AB16:05', 'CB16:55', 'AB17:05', 'CB17:40', 'AB18:00', 'CB18:30', 'AB19:10', 'AB22:45']
sigma_outflow_B = ['BA9:05', 'BC9:05', 'BC11:20', 'BA12:25', 'BC12:25', 'BA14:25', 'BC14:25', 'BA15:40', 'BC15:40', 'BC16:30', 'BA18:50', 'BC19:05', 'BA20:25']
sigma_inflow_C = ['AC00:00', 'BC9:05', 'BC11:20', 'BC12:25', 'AC13:05', 'BC14:25', 'BC15:40', 'AC15:45', 'BC16:30', 'AC17:25', 'BC19:05']
sigma_outflow_C = ['CA07:40', 'CB07:40', 'CB10:45', 'CB12:35', 'CA14:15', 'CB14:15', 'CA16:55', 'CB16:55', 'CB17:40', 'CA18:30', 'CB18:30'] 
avg_pax_f=['138.64', '141.71', '22.79', '148.93', '17.5', '127.86', '160.71', '133.14', '103.79', '36.0', '156.57', '87.36', '131.43', '111.64', '142.43', '91.64', '33.71', '133.0', '9.4', '144.71', '11.69', '133.71', '167.79', '92.36', '149.29', '2.0', '152.36', '130.14', '127.36', '104.14', '149.07', '13.57', '152.36', '137.14', '122.71', '166.79', '147.0'] 
avg_pax_l=['17.93', '17.0', '4.1', '17.21', '3.23', '15.5', '18.64', '14.5', '23.36', '3.79', '19.93', '25.0', '20.29', '23.79', '28.21', '17.86', '5.93', '28.93', '1.67', '22.71', '3.27', '20.5', '25.43', '6.36', '24.5', '2.4', '27.14', '19.14', '13.71', '13.64', '17.43', '3.38', '26.29', '17.57', '19.07', '14.29', '12.14'] 
avg_price_f=['1653.2', '1656.11', '1484.6', '1443.6', '1489.26', '886.96', '1464.07', '873.59', '1479.64', '1520.65', '883.77', '1467.29', '856.66', '1663.16', '1477.78', '1638.05', '1510.9', '1480.24', '1521.05', '1475.99', '1544.13', '1669.65', '852.25', '907.06', '1665.33', '1583.0', '1475.07', '1670.39', '872.18', '833.23', '1665.21', '1523.0', '1462.12', '875.17', '1466.01', '1462.84', '1455.47']  
avg_price_l=['473.63', '476.24', '450.8', '424.67', '443.62', '263.88', '441.88', '269.24', '470.28', '596.44', '299.39', '505.8', '279.25', '565.96', '464.67', '531.5', '496.51', '470.65', '821.73', '444.2', '483.3', '506.95', '275.1', '268.12', '493.28', '558.48', '461.18', '473.92', '265.62', '261.39', '463.64', '443.91', '447.25', '282.71', '433.96', '423.5', '436.14'] 
value_f_list =['2.671', '2.16', '2.16', '1.864', '1.864', '1.916', '2.05', '1.864', '3.079', '3.079', '2.826', '2.803', '2.803', '2.803', '2.803', '2.826', '2.826', '3.079', '3.079', '3.079', '3.079', '2.803', '2.803', '3.079', '2.826', '2.826', '2.803', '2.803', '2.826', '1.624', '3.126', '3.126', '2.411', '2.411', '1.624', '2.411', '2.671']
ratio_f_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_l_list=['1.303', '1.127', '1.127', '1', '1', '1', '1', '1', '1.652', '1.652', '1.475', '1.367', '1.367', '1.367', '1.367', '1.475', '1.475', '1.652', '1.652', '1.652', '1.652', '1.367', '1.367', '1.652', '1.475', '1.475', '1.367', '1.367', '1.475', '0.793', '1.631', '1.631', '1.293', '1.293', '0.793', '1.293', '1.303']
ratio_l_list=['0.72', '0.97', '0.97', '0.9', '0.9', '0.97', '0.72', '0.9', '0.9', '0.9', '0.97', '0.72', '0.72', '0.72', '0.72', '0.97', '0.97', '0.9', '0.9', '0.9', '0.9', '0.72', '0.72', '0.9', '0.97', '0.97', '0.72', '0.72', '0.97', '0.72', '0.97', '0.97', '0.9', '0.9', '0.72', '0.9', '0.72']
value_0_list=['0.9', '1.2', '1.2', '2.0', '2.0', '1.2', '0.9', '2.0', '2.0', '2.0', '1.2', '0.9', '0.9', '0.9', '0.9', '1.2', '1.2', '2.0', '2.0', '2.0', '2.0', '0.9', '0.9', '2.0', '1.2', '1.2', '0.9', '0.9', '1.2', '0.9', '1.2', '1.2', '2.0', '2.0', '0.9', '2.0', '0.9']
ratio_0_list=['4.92', '1.72', '1.72', '3.7', '3.7', '1.72', '4.92', '3.7', '3.7', '3.7', '1.72', '4.92', '4.92', '4.92', '4.92', '1.72', '1.72', '3.7', '3.7', '3.7', '3.7', '4.92', '4.92', '3.7', '1.72', '1.72', '4.92', '4.92', '1.72', '4.92', '1.72', '1.72', '3.7', '3.7', '4.92', '3.7', '4.92']
option_num = 30 
capacity_consum = 1.2
import gurobipy as gp
from gurobipy import GRB

# Create model
model = gp.Model(""FlightTicketOptimization"")
x_f = model.addVars(pt, name=""x_f"")  # Flexible tickets
x_l = model.addVars(pt, name=""x_l"")  # Limited tickets
x_o = model.addVars(pt, name=""x_o"")  # Other tickets
y = model.addVars(pt, vtype=GRB.BINARY, name=""y"")  # Flight selection

# Objective: Maximize revenue
model.setObjective(
gp.quicksum(avg_price_f[i] * x_f[pt[i]] + avg_price_l[i] * x_l[pt[i]] for i in range(len(pt))),
GRB.MAXIMIZE
)

# Capacity constraints
for i in range(len(pt)):
model.addConstr(capacity_consum * x_f[pt[i]] + x_l[pt[i]] <= 187, f""capacity_{{pt[i]}}"")

# Balance constraints
for i in range(len(pt)):
model.addConstr(
float(ratio_f_list[i]) * x_f[pt[i]] + float(ratio_l_list[i]) * x_l[pt[i]] + float(ratio_0_list[i]) * x_o[pt[i]]
<= float(avg_pax_f[i]) + float(avg_pax_l[i]),
f""balance_{{pt[i]}}""
)

# Scale constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]]/float(value_f_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]]/float(value_l_list[i]) - x_o[pt[i]]/float(value_0_list[i]) <= 0, f""scale_l_{{pt[i]}}"")

# M constraints (linking constraints)
M = 10000
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] <= M * y[pt[i]], f""M_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] <= M * y[pt[i]], f""M_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] <= M * y[pt[i]], f""M_o_{{pt[i]}}"")

# Flow conservation constraints
model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_A) ==
gp.quicksum(y[flight] for flight in sigma_outflow_A),
""flow_conservation_A""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_B) ==
gp.quicksum(y[flight] for flight in sigma_outflow_B),
""flow_conservation_B""
)

model.addConstr(
gp.quicksum(y[flight] for flight in sigma_inflow_C) ==
gp.quicksum(y[flight] for flight in sigma_outflow_C),
""flow_conservation_C""
)

# Cardinality constraint
model.addConstr(gp.quicksum(y[pt[i]] for i in range(len(pt))) <= option_num, ""cardinality"")

# Non-negativity constraints
for i in range(len(pt)):
model.addConstr(x_f[pt[i]] >= 0, f""nonneg_f_{{pt[i]}}"")
model.addConstr(x_l[pt[i]] >= 0, f""nonneg_l_{{pt[i]}}"")
model.addConstr(x_o[pt[i]] >= 0, f""nonneg_o_{{pt[i]}}"")

# Optimize model
model.optimize()

# Save model to file for inspection
model.write(""flight_optimization.lp"")
if model.status == GRB.OPTIMAL:
print(""Optimal Solution Found:"")
# Print decision variable values
for var in model.getVars():
if 'y' in var.VarName and var.X>0:
print(var.VarName,var.X)
else:
print(""No optimal solution found. Status Code:"", m.status) ","AB11:20, AB13:55, BA14:25, AB17:05, AB22:45","AB11:20, AB13:55, BA15:40, AB17:05, AB22:45",1,这个答案都对不上
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
